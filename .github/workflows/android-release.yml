name: Android Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version_name:
        description: 'Version name for the release'
        required: true
        default: '1.0.0'

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Decode Keystore
      if: ${{ secrets.KEYSTORE_BASE64 }}
      env:
        ENCODED_STRING: ${{ secrets.KEYSTORE_BASE64 }}
      run: |
        echo $ENCODED_STRING | base64 -d > app/keystore.jks
        
    - name: Build signed release APK
      if: ${{ secrets.KEYSTORE_BASE64 }}
      env:
        SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
        SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
        SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}
      run: |
        ./gradlew assembleRelease \
          -Pandroid.injected.signing.store.file=keystore.jks \
          -Pandroid.injected.signing.store.password=$SIGNING_STORE_PASSWORD \
          -Pandroid.injected.signing.key.alias=$SIGNING_KEY_ALIAS \
          -Pandroid.injected.signing.key.password=$SIGNING_KEY_PASSWORD
          
    - name: Build unsigned release APK (fallback)
      if: ${{ !secrets.KEYSTORE_BASE64 }}
      run: ./gradlew assembleRelease
      
    - name: Get version name
      id: version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "VERSION_NAME=${{ github.event.inputs.version_name }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
        
    - name: Rename APK
      run: |
        if [ -f "app/build/outputs/apk/release/app-release.apk" ]; then
          mv app/build/outputs/apk/release/app-release.apk app/build/outputs/apk/release/LanMusicSync-${{ steps.version.outputs.VERSION_NAME }}.apk
        else
          mv app/build/outputs/apk/release/app-release-unsigned.apk app/build/outputs/apk/release/LanMusicSync-${{ steps.version.outputs.VERSION_NAME }}-unsigned.apk
        fi
        
    - name: Generate changelog
      id: changelog
      run: |
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "## 更新内容" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### 新功能" >> $GITHUB_OUTPUT
        echo "- 局域网音乐同步播放" >> $GITHUB_OUTPUT
        echo "- Wi-Fi Direct设备连接" >> $GITHUB_OUTPUT
        echo "- 主从设备模式" >> $GITHUB_OUTPUT
        echo "- 现代化Material Design界面" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### 技术特性" >> $GITHUB_OUTPUT
        echo "- 低延迟音频同步" >> $GITHUB_OUTPUT
        echo "- 自动设备发现" >> $GITHUB_OUTPUT
        echo "- 稳定的网络通信" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### 系统要求" >> $GITHUB_OUTPUT
        echo "- Android 7.0 (API 24) 或更高版本" >> $GITHUB_OUTPUT
        echo "- 支持Wi-Fi Direct的设备" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.VERSION_NAME }}
        release_name: LAN Music Sync ${{ steps.version.outputs.VERSION_NAME }}
        body: ${{ steps.changelog.outputs.CHANGELOG }}
        draft: false
        prerelease: false
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: app/build/outputs/apk/release/LanMusicSync-${{ steps.version.outputs.VERSION_NAME }}.apk
        asset_name: LanMusicSync-${{ steps.version.outputs.VERSION_NAME }}.apk
        asset_content_type: application/vnd.android.package-archive
        
    - name: Upload to Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-apk-${{ steps.version.outputs.VERSION_NAME }}
        path: app/build/outputs/apk/release/LanMusicSync-${{ steps.version.outputs.VERSION_NAME }}.apk

